// Code generated by MockGen. DO NOT EDIT.
// Source: configuration/configuration_processor.go

// Package configuration is a generated GoMock package.
package configuration

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProcessor is a mock of Processor interface
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// getConfigurationProcess mocks base method
func (m *MockProcessor) getConfigurationProcess(serviceName, namespace string, version int) (*configView, error) {
	ret := m.ctrl.Call(m, "getConfigurationProcess", serviceName, namespace, version)
	ret0, _ := ret[0].(*configView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getConfigurationProcess indicates an expected call of getConfigurationProcess
func (mr *MockProcessorMockRecorder) getConfigurationProcess(serviceName, namespace, version interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getConfigurationProcess", reflect.TypeOf((*MockProcessor)(nil).getConfigurationProcess), serviceName, namespace, version)
}

// getLatestVersionProcess mocks base method
func (m *MockProcessor) getLatestVersionProcess(serviceName, namespace string) (int, error) {
	ret := m.ctrl.Call(m, "getLatestVersionProcess", serviceName, namespace)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getLatestVersionProcess indicates an expected call of getLatestVersionProcess
func (mr *MockProcessorMockRecorder) getLatestVersionProcess(serviceName, namespace interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLatestVersionProcess", reflect.TypeOf((*MockProcessor)(nil).getLatestVersionProcess), serviceName, namespace)
}

// createNewVersionProcess mocks base method
func (m *MockProcessor) createNewVersionProcess(serviceName, namespace string, config configView) error {
	ret := m.ctrl.Call(m, "createNewVersionProcess", serviceName, namespace, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// createNewVersionProcess indicates an expected call of createNewVersionProcess
func (mr *MockProcessorMockRecorder) createNewVersionProcess(serviceName, namespace, config interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createNewVersionProcess", reflect.TypeOf((*MockProcessor)(nil).createNewVersionProcess), serviceName, namespace, config)
}

// getConfigurationVersionsProcess mocks base method
func (m *MockProcessor) getConfigurationVersionsProcess(serviceName, namespace string) (string, error) {
	ret := m.ctrl.Call(m, "getConfigurationVersionsProcess", serviceName, namespace)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getConfigurationVersionsProcess indicates an expected call of getConfigurationVersionsProcess
func (mr *MockProcessorMockRecorder) getConfigurationVersionsProcess(serviceName, namespace interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getConfigurationVersionsProcess", reflect.TypeOf((*MockProcessor)(nil).getConfigurationVersionsProcess), serviceName, namespace)
}
