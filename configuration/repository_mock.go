// Code generated by MockGen. DO NOT EDIT.
// Source: configuration/configuration_repository.go

// Package configuration_test is a generated GoMock package.
package configuration

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// getConfiguration mocks base method
func (m *MockRepository) getConfiguration(serviceId int, namespace string, version int) (*configView, error) {
	ret := m.ctrl.Call(m, "getConfiguration", serviceId, namespace, version)
	ret0, _ := ret[0].(*configView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getConfiguration indicates an expected call of getConfiguration
func (mr *MockRepositoryMockRecorder) getConfiguration(serviceId, namespace, version interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getConfiguration", reflect.TypeOf((*MockRepository)(nil).getConfiguration), serviceId, namespace, version)
}

// getLatestVersionForNamespace mocks base method
func (m *MockRepository) getLatestVersionForNamespace(serviceId int, namespace string) (int, error) {
	ret := m.ctrl.Call(m, "getLatestVersionForNamespace", serviceId, namespace)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getLatestVersionForNamespace indicates an expected call of getLatestVersionForNamespace
func (mr *MockRepositoryMockRecorder) getLatestVersionForNamespace(serviceId, namespace interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLatestVersionForNamespace", reflect.TypeOf((*MockRepository)(nil).getLatestVersionForNamespace), serviceId, namespace)
}

// createNewVersion mocks base method
func (m *MockRepository) createNewVersion(serviceId int, namespace string, config configView, version int) error {
	ret := m.ctrl.Call(m, "createNewVersion", serviceId, namespace, config, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// createNewVersion indicates an expected call of createNewVersion
func (mr *MockRepositoryMockRecorder) createNewVersion(serviceId, namespace, config, version interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createNewVersion", reflect.TypeOf((*MockRepository)(nil).createNewVersion), serviceId, namespace, config, version)
}

// updateNamespaceActiveVersion mocks base method
func (m *MockRepository) updateNamespaceActiveVersion(qserviceId int, namespace string, version int) error {
	ret := m.ctrl.Call(m, "updateNamespaceActiveVersion", qserviceId, namespace, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateNamespaceActiveVersion indicates an expected call of updateNamespaceActiveVersion
func (mr *MockRepositoryMockRecorder) updateNamespaceActiveVersion(qserviceId, namespace, version interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateNamespaceActiveVersion", reflect.TypeOf((*MockRepository)(nil).updateNamespaceActiveVersion), qserviceId, namespace, version)
}

// getVersions mocks base method
func (m *MockRepository) getVersions(serviceId int, namespace string) ([]int, error) {
	ret := m.ctrl.Call(m, "getVersions", serviceId, namespace)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getVersions indicates an expected call of getVersions
func (mr *MockRepositoryMockRecorder) getVersions(serviceId, namespace interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getVersions", reflect.TypeOf((*MockRepository)(nil).getVersions), serviceId, namespace)
}

// getServiceId mocks base method
func (m *MockRepository) getServiceId(serviceName string) (int, error) {
	ret := m.ctrl.Call(m, "getServiceId", serviceName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getServiceId indicates an expected call of getServiceId
func (mr *MockRepositoryMockRecorder) getServiceId(serviceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getServiceId", reflect.TypeOf((*MockRepository)(nil).getServiceId), serviceName)
}
