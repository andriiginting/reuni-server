// Code generated by MockGen. DO NOT EDIT.
// Source: services/service_processor.go

// Package services is a generated GoMock package.
package services

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockserviceProcessorInterface is a mock of serviceProcessorInterface interface
type MockserviceProcessorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockserviceProcessorInterfaceMockRecorder
}

// MockserviceProcessorInterfaceMockRecorder is the mock recorder for MockserviceProcessorInterface
type MockserviceProcessorInterfaceMockRecorder struct {
	mock *MockserviceProcessorInterface
}

// NewMockserviceProcessorInterface creates a new mock instance
func NewMockserviceProcessorInterface(ctrl *gomock.Controller) *MockserviceProcessorInterface {
	mock := &MockserviceProcessorInterface{ctrl: ctrl}
	mock.recorder = &MockserviceProcessorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockserviceProcessorInterface) EXPECT() *MockserviceProcessorInterfaceMockRecorder {
	return m.recorder
}

// createServiceProcessor mocks base method
func (m *MockserviceProcessorInterface) createServiceProcessor(servicedata servicev, organizationId int) error {
	ret := m.ctrl.Call(m, "createServiceProcessor", servicedata, organizationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// createServiceProcessor indicates an expected call of createServiceProcessor
func (mr *MockserviceProcessorInterfaceMockRecorder) createServiceProcessor(servicedata, organizationId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createServiceProcessor", reflect.TypeOf((*MockserviceProcessorInterface)(nil).createServiceProcessor), servicedata, organizationId)
}

// deleteServiceProcessor mocks base method
func (m *MockserviceProcessorInterface) deleteServiceProcessor(organizationId int, servicedata servicev) error {
	ret := m.ctrl.Call(m, "deleteServiceProcessor", organizationId, servicedata)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteServiceProcessor indicates an expected call of deleteServiceProcessor
func (mr *MockserviceProcessorInterfaceMockRecorder) deleteServiceProcessor(organizationId, servicedata interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteServiceProcessor", reflect.TypeOf((*MockserviceProcessorInterface)(nil).deleteServiceProcessor), organizationId, servicedata)
}

// ValidateTokenProcessor mocks base method
func (m *MockserviceProcessorInterface) ValidateTokenProcessor(organizationId int, serviceName, inputToken string) (bool, error) {
	ret := m.ctrl.Call(m, "ValidateTokenProcessor", organizationId, serviceName, inputToken)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateTokenProcessor indicates an expected call of ValidateTokenProcessor
func (mr *MockserviceProcessorInterfaceMockRecorder) ValidateTokenProcessor(organizationId, serviceName, inputToken interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTokenProcessor", reflect.TypeOf((*MockserviceProcessorInterface)(nil).ValidateTokenProcessor), organizationId, serviceName, inputToken)
}

// FindOneServiceByName mocks base method
func (m *MockserviceProcessorInterface) FindOneServiceByName(organizationId int, name string) (*service, error) {
	ret := m.ctrl.Call(m, "FindOneServiceByName", organizationId, name)
	ret0, _ := ret[0].(*service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneServiceByName indicates an expected call of FindOneServiceByName
func (mr *MockserviceProcessorInterfaceMockRecorder) FindOneServiceByName(organizationId, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneServiceByName", reflect.TypeOf((*MockserviceProcessorInterface)(nil).FindOneServiceByName), organizationId, name)
}

// TranslateNameToIdProcessor mocks base method
func (m *MockserviceProcessorInterface) TranslateNameToIdProcessor(name string) (int, error) {
	ret := m.ctrl.Call(m, "TranslateNameToIdProcessor", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateNameToIdProcessor indicates an expected call of TranslateNameToIdProcessor
func (mr *MockserviceProcessorInterfaceMockRecorder) TranslateNameToIdProcessor(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateNameToIdProcessor", reflect.TypeOf((*MockserviceProcessorInterface)(nil).TranslateNameToIdProcessor), name)
}

// getAllServicesBasedOnOrganizationProcessor mocks base method
func (m *MockserviceProcessorInterface) getAllServicesBasedOnOrganizationProcessor(organizationId int) ([]service, error) {
	ret := m.ctrl.Call(m, "getAllServicesBasedOnOrganizationProcessor", organizationId)
	ret0, _ := ret[0].([]service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAllServicesBasedOnOrganizationProcessor indicates an expected call of getAllServicesBasedOnOrganizationProcessor
func (mr *MockserviceProcessorInterfaceMockRecorder) getAllServicesBasedOnOrganizationProcessor(organizationId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllServicesBasedOnOrganizationProcessor", reflect.TypeOf((*MockserviceProcessorInterface)(nil).getAllServicesBasedOnOrganizationProcessor), organizationId)
}
