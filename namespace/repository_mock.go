// Code generated by MockGen. DO NOT EDIT.
// Source: namespace/namespace_repository.go

// Package mock_namespace is a generated GoMock package.
package namespace

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNamespaceRepository is a mock of namespaceRepositoryInterface interface
type MockNamespaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceRepositoryMockRecorder
}

// MockNamespaceRepositoryMockRecorder is the mock recorder for MockNamespaceRepository
type MockNamespaceRepositoryMockRecorder struct {
	mock *MockNamespaceRepository
}

// NewMockNamespaceRepository creates a new mock instance
func NewMockNamespaceRepository(ctrl *gomock.Controller) *MockNamespaceRepository {
	mock := &MockNamespaceRepository{ctrl: ctrl}
	mock.recorder = &MockNamespaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceRepository) EXPECT() *MockNamespaceRepositoryMockRecorder {
	return m.recorder
}

// isNamespaceExist mocks base method
func (m *MockNamespaceRepository) isNamespaceExist(service_id int, namespace string) (bool, error) {
	ret := m.ctrl.Call(m, "isNamespaceExist", service_id, namespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isNamespaceExist indicates an expected call of isNamespaceExist
func (mr *MockNamespaceRepositoryMockRecorder) isNamespaceExist(service_id, namespace interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNamespaceExist", reflect.TypeOf((*MockNamespaceRepository)(nil).isNamespaceExist), service_id, namespace)
}

// createConfiguration mocks base method
func (m *MockNamespaceRepository) createConfiguration(serviceId int, name string, configurations map[string]interface{}) error {
	ret := m.ctrl.Call(m, "createConfiguration", serviceId, name, configurations)
	ret0, _ := ret[0].(error)
	return ret0
}

// createConfiguration indicates an expected call of createConfiguration
func (mr *MockNamespaceRepositoryMockRecorder) createConfiguration(serviceId, name, configurations interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createConfiguration", reflect.TypeOf((*MockNamespaceRepository)(nil).createConfiguration), serviceId, name, configurations)
}

// createNewNamespace mocks base method
func (m *MockNamespaceRepository) createNewNamespace(namespaceStore *namespaceStore) error {
	ret := m.ctrl.Call(m, "createNewNamespace", namespaceStore)
	ret0, _ := ret[0].(error)
	return ret0
}

// createNewNamespace indicates an expected call of createNewNamespace
func (mr *MockNamespaceRepositoryMockRecorder) createNewNamespace(namespaceStore interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createNewNamespace", reflect.TypeOf((*MockNamespaceRepository)(nil).createNewNamespace), namespaceStore)
}

// retrieveAllNamespace mocks base method
func (m *MockNamespaceRepository) retrieveAllNamespace(service_id int) ([]namespaceStore, error) {
	ret := m.ctrl.Call(m, "retrieveAllNamespace", service_id)
	ret0, _ := ret[0].([]namespaceStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// retrieveAllNamespace indicates an expected call of retrieveAllNamespace
func (mr *MockNamespaceRepositoryMockRecorder) retrieveAllNamespace(service_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "retrieveAllNamespace", reflect.TypeOf((*MockNamespaceRepository)(nil).retrieveAllNamespace), service_id)
}

// getServiceId mocks base method
func (m *MockNamespaceRepository) getServiceId(serviceName string) (int, error) {
	ret := m.ctrl.Call(m, "getServiceId", serviceName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getServiceId indicates an expected call of getServiceId
func (mr *MockNamespaceRepositoryMockRecorder) getServiceId(serviceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getServiceId", reflect.TypeOf((*MockNamespaceRepository)(nil).getServiceId), serviceName)
}
